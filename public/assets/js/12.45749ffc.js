(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{566:function(t,n,e){"use strict";e.r(n);var s=e(13),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("原文链接：https://blog.csdn.net/ganquanzhong/article/details/108633025")]),t._v(" "),e("p",[t._v("ElasticSearch\n倒排索引")]),t._v(" "),e("p",[t._v("Logstash\n有用的 Logstash 链接")]),t._v(" "),e("p",[t._v("Logstash 频道博客文章\nhttps://blog.csdn.net/ubuntutouch/category_9335275.html\n如何安装 Elastic 栈中的 Logstash\nhttps://blog.csdn.net/UbuntuTouch/article/details/99655350\nLogstash：Logstash 入门教程 （一）\nhttps://elasticstack.blog.csdn.net/article/details/105973985\nLogstash：Logstash 入门教程 （二）\nhttps://elasticstack.blog.csdn.net/article/details/105979677\nLogstash：Data转换，分析，提取，丰富及核心操作\nhttps://blog.csdn.net/UbuntuTouch/article/details/100770828\nLogstash：把Apache日志导入到 Elasticsearch\nhttps://blog.csdn.net/UbuntuTouch/article/details/100727051\nLogstash: 启动监控及集中管理\nhttps://blog.csdn.net/UbuntuTouch/article/details/103767088\nLogstash 培训视频\nhttps://www.elastic.co/cn/webinars/getting-started-logstash")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303301720506.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303301720786.png",alt:""}})]),t._v(" "),e("p",[t._v("设计方案\nES 订单数据的同步方案\nMySQL数据同步到ES中，大致总结可以分为两种方案：\n方案1：监听MySQL的Binlog，分析Binlog将数据同步到ES集群中。\n方案2：直接通过ES API将数据写入到ES集群中。\n考虑到订单系统ES服务的业务特殊性，对于订单数据的实时性较高，显然监听Binlog的方式相当于异步同步，有可能会产生较大的延时性。且方案1实质上跟方案2类似，但又引入了新的系统，维护成本也增高。所以订单中心ES采用了直接通过ES API写入订单数据的方式，该方式简洁灵活，能够很好的满足订单中心数据同步到ES的需求。")]),t._v(" "),e("p",[t._v("由于ES订单数据的同步采用的是在业务中写入的方式，当新建或更新文档发生异常时，如果重试势必会影响业务正常操作的响应时间。")]),t._v(" "),e("p",[t._v("所以每次业务操作只更新一次ES，如果发生错误或者异常，在数据库中插入一条补救任务，有Worker任务会实时地扫这些数据，以数据库订单数据为基准来再次更新ES数据。通过此种补偿机制，来保证ES数据与数据库订单数据的最终一致性。")]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v("搜索所有index（慎用）：\nGET  /_search\n\n搜一个索引下，所有type，（不指定type即可）\nGET /beauties/_search\n\n搜多个索引，则多个索引间，用逗号(,)分隔开\nGET /beauties,test_index/_search\n\n使用通配符，搜索所有匹配的index内容\nGET /*e*,b*/_search\n\n搜索一个index下，多个type\nGET /beauties/my,cn/_search\n\n搜索所有index下，指定type，（用 _all 代指所有index）\nGET /_all/my,cn/_search\n\n/_search：所有索引，所有type下的所有数据都搜索出来\n/index1/_search：指定一个index，搜索其下所有type的数据\n/index1,index2/_search：同时搜索两个index下的数据\n/*1,*2/_search：按照通配符去匹配多个索引\n/index1/type1/_search：搜索一个index下指定的type的数据\n/index1/type1,type2/_search：可以搜索一个index下多个type的数据\n/index1,index2/type1,type2/_search：搜索多个index下的多个type的数据\n/_all/type1,type2/_search：_all，可以代表搜索所有index下的指定type的数据\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br")])]),e("h2",{attrs:{id:"elasticsearch-一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-一"}},[t._v("#")]),t._v(" ElasticSearch（一）")]),t._v(" "),e("h3",{attrs:{id:"学习目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#学习目标"}},[t._v("#")]),t._v(" 学习目标：")]),t._v(" "),e("p",[t._v("能够理解ElasticSearch的作用\n能够安装ElasticSearch服务\n能够理解ElasticSearch的相关概念\n能够使用Postman发送Restful请求操作ElasticSearch\n能够理解分词器的作用\n能够使用ElasticSearch集成IK分词器\n能够完成es集群搭建")]),t._v(" "),e("h3",{attrs:{id:"第一章-elasticsearch简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一章-elasticsearch简介"}},[t._v("#")]),t._v(" 第一章 ElasticSearch简介")]),t._v(" "),e("h4",{attrs:{id:"_1-1-什么是elasticsearch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是elasticsearch"}},[t._v("#")]),t._v(" 1.1 什么是ElasticSearch")]),t._v(" "),e("p",[t._v("Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。")]),t._v(" "),e("h4",{attrs:{id:"_1-2-elasticsearch的使用案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-elasticsearch的使用案例"}},[t._v("#")]),t._v(" 1.2 ElasticSearch的使用案例")]),t._v(" "),e("p",[t._v("2013年初，GitHub抛弃了Solr，采取ElasticSearch 来做PB级的搜索。 “GitHub使用ElasticSearch搜索20TB的数据，包括13亿文件和1300亿行代码”\n维基百科：启动以elasticsearch为基础的核心搜索架构\nSoundCloud：“SoundCloud使用ElasticSearch为1.8亿用户提供即时而精准的音乐搜索服务”\n百度：百度目前广泛使用ElasticSearch作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部20多个业务线（包括casio、云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大100台机器，200个ES节点，每天导入30TB+数据\n新浪使用ES 分析处理32亿条实时日志\n阿里使用ES 构建挖财自己的日志采集和分析体系")]),t._v(" "),e("h4",{attrs:{id:"_1-3-elasticsearch对比solr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-elasticsearch对比solr"}},[t._v("#")]),t._v(" 1.3 ElasticSearch对比Solr")]),t._v(" "),e("p",[t._v("Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;\nSolr 支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；\nSolr 官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；\nSolr 在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch")]),t._v(" "),e("h3",{attrs:{id:"第二章-elasticsearch安装与启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二章-elasticsearch安装与启动"}},[t._v("#")]),t._v(" 第二章 ElasticSearch安装与启动")]),t._v(" "),e("h4",{attrs:{id:"_2-1-下载es压缩包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-下载es压缩包"}},[t._v("#")]),t._v(" 2.1 下载ES压缩包")]),t._v(" "),e("p",[t._v("ElasticSearch分为Linux和Windows版本，基于我们主要学习的是ElasticSearch的Java客户端的使用，所以我们课程中使用的是安装较为简便的Window版本，项目上线后，公司的运维人员会安装Linux版的ES供我们连接使用。")]),t._v(" "),e("p",[t._v("ElasticSearch的官方地址： https://www.elastic.co/products/elasticsearch")]),t._v(" "),e("p",[t._v("在资料中已经提供了下载好的5.6.8的压缩包：\n这里下载6.5版本，当然你也可以下载最新版本，注意新版本有许多新的特性！！")]),t._v(" "),e("h4",{attrs:{id:"_2-2-安装es服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装es服务"}},[t._v("#")]),t._v(" 2.2 安装ES服务")]),t._v(" "),e("p",[t._v("Windows版的ElasticSearch的安装很简单，类似Windows版的Tomcat，解压开即安装完毕，解压后的ElasticSearch的目录结构如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303311002558.png",alt:""}})]),t._v(" "),e("p",[t._v("修改elasticsearch配置文件：config/elasticsearch.yml，增加以下两句命令：")]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v('http.cors.enabled: true\nhttp.cors.allow-origin: "*"\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("此步为允许elasticsearch跨越访问，如果不安装后面的elasticsearch-head是可以不修改，直接启动。")]),t._v(" "),e("h4",{attrs:{id:"_2-3-启动es服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-启动es服务"}},[t._v("#")]),t._v(" 2.3 启动ES服务")]),t._v(" "),e("p",[t._v("点击ElasticSearch下的bin目录下的elasticsearch.bat启动，控制台显示的日志信息如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303311003118.png",alt:""}})]),t._v(" "),e("p",[t._v("注意：9300是tcp通讯端口，集群间和TCPClient都执行该端口，9200是http协议的RESTful接口 。")]),t._v(" "),e("p",[t._v("通过浏览器访问ElasticSearch服务器，看到如下返回的json信息，代表服务启动成功：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303311021662.png",alt:""}})]),t._v(" "),e("p",[t._v("注意：ElasticSearch是使用java开发的，且本版本的es需要的jdk版本要是1.8以上，所以安装ElasticSearch之前保证JDK1.8+安装完毕，并正确的配置好JDK环境变量，否则启动ElasticSearch失败。")]),t._v(" "),e("h4",{attrs:{id:"_2-4-安装es的图形化界面插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-安装es的图形化界面插件"}},[t._v("#")]),t._v(" 2.4 安装ES的图形化界面插件")]),t._v(" "),e("p",[t._v("ElasticSearch不同于Solr自带图形化界面，我们可以通过安装ElasticSearch的head插件，完成图形化界面的效果，完成索引数据的查看。安装插件的方式有两种，在线安装和本地安装。本文档采用本地安装方式进行head插件的安装。elasticsearch-5-*以上版本安装head需要安装node和grunt")]),t._v(" "),e("p",[t._v("1）下载head插件：https://github.com/mobz/elasticsearch-head")]),t._v(" "),e("p",[t._v("在资料中已经提供了elasticsearch-head-master插件压缩包：")]),t._v(" "),e("p",[t._v("2）将elasticsearch-head-master压缩包解压到任意目录，但是要和elasticsearch的安装目录区别开")]),t._v(" "),e("p",[t._v("3）下载nodejs：https://nodejs.org/en/download/")]),t._v(" "),e("p",[t._v("在资料中已经提供了nodejs安装程序：")]),t._v(" "),e("p",[t._v("双击安装程序，步骤截图如下：")]),t._v(" "),e("p",[t._v("安装完毕，可以通过cmd控制台输入：node -v 查看版本号")]),t._v(" "),e("p",[t._v("5）将grunt安装为全局命令 ，Grunt是基于Node.js的项目构建工具")]),t._v(" "),e("p",[t._v("在cmd控制台中输入如下执行命令：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g grunt-cli\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("6）进入elasticsearch-head-master目录启动head，在命令提示符下输入命令：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\ngrunt server\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("7）打开浏览器，输入 http://localhost:9100，看到如下页面：")]),t._v(" "),e("p",[t._v("如果不能成功连接到es服务，需要修改ElasticSearch的config目录下的配置文件：config/elasticsearch.yml，增加以下两句命令：")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("http.cors.enabled: "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nhttp.cors.allow-origin: "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("然后重新启动ElasticSearch服务。")]),t._v(" "),e("p",[t._v("我这里使用的是谷歌浏览器插件")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pic-new-1304161434.cos.ap-guangzhou.myqcloud.com/img/202303311023474.png",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"第三章-elasticsearch相关概念-术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三章-elasticsearch相关概念-术语"}},[t._v("#")]),t._v(" 第三章 ElasticSearch相关概念(术语)")]),t._v(" "),e("h4",{attrs:{id:"_3-1-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-概述"}},[t._v("#")]),t._v(" 3.1 概述")]),t._v(" "),e("p",[t._v("Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：")]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v("Relational DB -> Databases -> Tables -> Rows -> Columns\nElasticsearch -> Indices   -> Types  -> Documents -> Fields\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h4",{attrs:{id:"_3-2-elasticsearch核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-elasticsearch核心概念"}},[t._v("#")]),t._v(" 3.2 Elasticsearch核心概念")]),t._v(" "),e("h5",{attrs:{id:"_3-2-1-索引-index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-索引-index"}},[t._v("#")]),t._v(" 3.2.1 索引 index")]),t._v(" "),e("p",[t._v("一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。")]),t._v(" "),e("h5",{attrs:{id:"_3-2-2-类型-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-类型-type"}},[t._v("#")]),t._v(" 3.2.2 类型 type")]),t._v(" "),e("p",[t._v("在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。")]),t._v(" "),e("h5",{attrs:{id:"_3-2-3-字段field"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-字段field"}},[t._v("#")]),t._v(" 3.2.3 字段Field")]),t._v(" "),e("p",[t._v("相当于是数据表的字段，对文档数据根据不同属性进行的分类标识")]),t._v(" "),e("h5",{attrs:{id:"_3-2-4-映射-mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-4-映射-mapping"}},[t._v("#")]),t._v(" 3.2.4 映射 mapping")]),t._v(" "),e("p",[t._v("mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。")]),t._v(" "),e("h5",{attrs:{id:"_3-2-5-文档-document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-5-文档-document"}},[t._v("#")]),t._v(" 3.2.5 文档 document")]),t._v(" "),e("p",[t._v("一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。")]),t._v(" "),e("p",[t._v("在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。")]),t._v(" "),e("h5",{attrs:{id:"_3-2-6-接近实时-nrt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-6-接近实时-nrt"}},[t._v("#")]),t._v(" 3.2.6 接近实时 NRT")]),t._v(" "),e("p",[t._v("Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒以内）")]),t._v(" "),e("h5",{attrs:{id:"_3-2-7-集群-cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-7-集群-cluster"}},[t._v("#")]),t._v(" 3.2.7 集群 cluster")]),t._v(" "),e("p",[t._v("一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群")]),t._v(" "),e("h5",{attrs:{id:"_3-2-8-节点-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-8-节点-node"}},[t._v("#")]),t._v(" 3.2.8 节点 node")]),t._v(" "),e("p",[t._v("一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。")]),t._v(" "),e("p",[t._v("一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。")]),t._v(" "),e("p",[t._v("在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。")]),t._v(" "),e("h5",{attrs:{id:"_3-2-9-分片和复制-shards-replicas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-9-分片和复制-shards-replicas"}},[t._v("#")]),t._v(" 3.2.9 分片和复制 shards&replicas")]),t._v(" "),e("p",[t._v("一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：\n1）允许你水平分割/扩展你的内容容量。\n2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。")]),t._v(" "),e("p",[t._v("至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。")]),t._v(" "),e("p",[t._v("在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。")]),t._v(" "),e("p",[t._v("复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。")]),t._v(" "),e("p",[t._v("默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。")]),t._v(" "),e("h3",{attrs:{id:"第四章-elasticsearch的客户端操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第四章-elasticsearch的客户端操作"}},[t._v("#")]),t._v(" 第四章 ElasticSearch的客户端操作")]),t._v(" "),e("p",[t._v("实际开发中，主要有三种方式可以作为elasticsearch服务的客户端：")]),t._v(" "),e("p",[t._v("第一种，elasticsearch-head插件\n第二种，使用elasticsearch提供的Restful接口直接访问\n第三种，使用elasticsearch提供的API进行访问")]),t._v(" "),e("h4",{attrs:{id:"_4-1-安装postman工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-安装postman工具"}},[t._v("#")]),t._v(" 4.1 安装Postman工具")]),t._v(" "),e("p",[t._v("Postman中文版是postman这款强大网页调试工具的windows客户端，提供功能强大的Web API & HTTP 请求调试。软件功能非常强大，界面简洁明晰、操作方便快捷，设计得很人性化。Postman中文版能够发送任何类型的HTTP 请求 (GET, HEAD, POST, PUT…)，且可以附带任何数量的参数。")]),t._v(" "),e("h4",{attrs:{id:"_4-1-下载postman工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-下载postman工具"}},[t._v("#")]),t._v(" 4.1 下载Postman工具")]),t._v(" "),e("p",[t._v("Postman官网：https://www.getpostman.com")]),t._v(" "),e("h4",{attrs:{id:"_4-2-注册postman工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-注册postman工具"}},[t._v("#")]),t._v(" 4.2 注册Postman工具")]),t._v(" "),e("p",[t._v("使用Postman工具进行Restful接口访问")]),t._v(" "),e("h5",{attrs:{id:"_4-2-1-elasticsearch的接口语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-elasticsearch的接口语法"}},[t._v("#")]),t._v(" 4.2.1 ElasticSearch的接口语法")]),t._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("VERB"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<PROTOCOL>://<HOST>:<PORT>/<PATH>?<QUERY_STRING>'")]),t._v(" -d "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<BODY>'")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("其中：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("解释")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("VERB")]),t._v(" "),e("td",[t._v("适当的 HTTP 方法 或 谓词 : GET、 POST、 PUT、 HEAD 或者 DELETE。")])]),t._v(" "),e("tr",[e("td",[t._v("PROTOCOL")]),t._v(" "),e("td",[t._v("http 或者 https（如果你在 Elasticsearch 前面有一个 https 代理）")])]),t._v(" "),e("tr",[e("td",[t._v("HOST")]),t._v(" "),e("td",[t._v("Elasticsearch 集群中任意节点的主机名，或者用 localhost 代表本地机器上的节点。")])]),t._v(" "),e("tr",[e("td",[t._v("PORT")]),t._v(" "),e("td",[t._v("运行 Elasticsearch HTTP 服务的端口号，默认是 9200 。")])]),t._v(" "),e("tr",[e("td",[t._v("PATH")]),t._v(" "),e("td",[t._v("API 的终端路径（例如 _count 将返回集群中文档数量）。Path 可能包含多个组件，例如：_cluster/stats 和 _nodes/stats/jvm 。")])]),t._v(" "),e("tr",[e("td",[t._v("QUERY_STRING")]),t._v(" "),e("td",[t._v("任意可选的查询字符串参数 (例如 ?pretty 将格式化地输出 JSON 返回值，使其更容易阅读)")])]),t._v(" "),e("tr",[e("td",[t._v("BODY")]),t._v(" "),e("td",[t._v("一个 JSON 格式的请求体 (如果请求需要的话)")])])])]),t._v(" "),e("h5",{attrs:{id:"_4-2-2-创建索引index和映射mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-创建索引index和映射mapping"}},[t._v("#")]),t._v(" 4.2.2 创建索引index和映射mapping")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("PUT\t\tlocalhost:9200/blog1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"mappings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"article"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"properties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"long"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not_analyzed"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"analyzed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"analyzed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br")])]),e("p",[t._v("elasticsearch-head查看：")]),t._v(" "),e("h5",{attrs:{id:"_4-2-3-创建索引后设置mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-创建索引后设置mapping"}},[t._v("#")]),t._v(" 4.2.3 创建索引后设置Mapping")]),t._v(" "),e("p",[t._v("我们可以在创建索引时设置mapping信息，当然也可以先创建索引然后再设置mapping。")]),t._v(" "),e("p",[t._v("在上一个步骤中不设置maping信息，直接使用put方法创建一个索引，然后设置mapping信息。")]),t._v(" "),e("p",[t._v("请求的url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("POST\thttp://127.0.0.1:9200/blog2/hello/_mapping\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hello"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"properties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"long"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br")])]),e("h5",{attrs:{id:"_4-2-4-删除索引index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-删除索引index"}},[t._v("#")]),t._v(" 4.2.4 删除索引index")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("DELETE\t\tlocalhost:9200/blog1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h5",{attrs:{id:"_4-2-5-创建文档document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-5-创建文档document"}},[t._v("#")]),t._v(" 4.2.5 创建文档document")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("POST\tlocalhost:9200/blog1/article/1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ElasticSearch是一个基于Lucene的搜索服务器"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h5",{attrs:{id:"_4-2-6-修改文档document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-6-修改文档document"}},[t._v("#")]),t._v(" 4.2.6 修改文档document")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("POST\tlocalhost:9200/blog1/article/1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"【修改】ElasticSearch是一个基于Lucene的搜索服务器"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h5",{attrs:{id:"_4-2-7-删除文档document"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-7-删除文档document"}},[t._v("#")]),t._v(" 4.2.7 删除文档document")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("DELETE\tlocalhost:9200/blog1/article/1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h5",{attrs:{id:"_4-2-8-查询文档-根据id查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-8-查询文档-根据id查询"}},[t._v("#")]),t._v(" 4.2.8 查询文档-根据id查询")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("GET\tlocalhost:9200/blog1/article/1\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h5",{attrs:{id:"_4-2-9-查询文档-querystring查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-9-查询文档-querystring查询"}},[t._v("#")]),t._v(" 4.2.9 查询文档-querystring查询")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("POST\tlocalhost:9200/blog1/article/_search\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query_string"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"default_field"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"搜索服务器"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("注意：")]),t._v(" "),e("p",[t._v('将搜索内容"搜索服务器"修改为"钢索"，同样也能搜索到文档，该原因会在下面讲解中得到答案')]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query_string"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"default_field"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"钢索"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("h5",{attrs:{id:"_4-2-10-查询文档-term查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-10-查询文档-term查询"}},[t._v("#")]),t._v(" 4.2.10 查询文档-term查询")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[t._v("POST\tlocalhost:9200/blog1/article/_search\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("请求体：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"term"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"搜索"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("h3",{attrs:{id:"第五章-ik-分词器和elasticsearch集成使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第五章-ik-分词器和elasticsearch集成使用"}},[t._v("#")]),t._v(" 第五章 IK 分词器和ElasticSearch集成使用")]),t._v(" "),e("h4",{attrs:{id:"_5-1-上述查询存在问题分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-上述查询存在问题分析"}},[t._v("#")]),t._v(" 5.1 上述查询存在问题分析")]),t._v(" "),e("p",[t._v('在进行字符串查询时，我们发现去搜索"搜索服务器"和"钢索"都可以搜索到数据；')]),t._v(" "),e("p",[t._v('而在进行词条查询时，我们搜索"搜索"却没有搜索到数据；')]),t._v(" "),e("p",[t._v("究其原因是ElasticSearch的标准分词器导致的，当我们创建索引时，字段使用的是标准分词器：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"mappings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"article"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"properties"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"long"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not_analyzed"')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"analyzed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//标准分词器")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                \t"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"store"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"index"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"analyzed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"analyzer"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"standard"')]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//标准分词器")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br")])]),e("p",[t._v("例如对 “我是程序员” 进行分词")]),t._v(" "),e("p",[t._v("标准分词器分词效果测试：")]),t._v(" "),e("div",{staticClass:"language-url line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-url"}},[e("code",[e("span",{pre:!0,attrs:{class:"token scheme"}},[t._v("http"),e("span",{pre:!0,attrs:{class:"token scheme-delimiter"}},[t._v(":")])]),e("span",{pre:!0,attrs:{class:"token authority"}},[e("span",{pre:!0,attrs:{class:"token authority-delimiter"}},[t._v("//")]),e("span",{pre:!0,attrs:{class:"token host"}},[e("span",{pre:!0,attrs:{class:"token ipv4-address"}},[t._v("127.0.0.1")])]),e("span",{pre:!0,attrs:{class:"token port-segment"}},[e("span",{pre:!0,attrs:{class:"token port-delimiter"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token port"}},[t._v("9200")])])]),e("span",{pre:!0,attrs:{class:"token path"}},[e("span",{pre:!0,attrs:{class:"token path-separator"}},[t._v("/")]),t._v("_analyze")]),e("span",{pre:!0,attrs:{class:"token query"}},[e("span",{pre:!0,attrs:{class:"token query-delimiter"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("analyzer")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("standard")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("pretty")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("true")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("text")]),t._v("=")])]),t._v("我是程序员\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("分词结果：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tokens"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<IDEOGRAPHIC>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<IDEOGRAPHIC>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<IDEOGRAPHIC>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"序"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<IDEOGRAPHIC>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"员"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<IDEOGRAPHIC>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br")])]),e("p",[t._v("而我们需要的分词效果是：我、是、程序、程序员")]),t._v(" "),e("p",[t._v("这样的话就需要对中文支持良好的分析器的支持，支持中文分词的分词器有很多，word分词器、庖丁解牛、盘古分词、Ansj分词等，但我们常用的还是下面要介绍的IK分词器。")]),t._v(" "),e("h4",{attrs:{id:"_5-2-ik分词器简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-ik分词器简介"}},[t._v("#")]),t._v(" 5.2 IK分词器简介")]),t._v(" "),e("p",[t._v("IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出 了3个大版本。最初，它是以开源项目Lucene为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IKAnalyzer3.0则发展为 面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。")]),t._v(" "),e("p",[t._v("IK分词器3.0的特性如下：")]),t._v(" "),e("p",[t._v("1）采用了特有的“正向迭代最细粒度切分算法“，具有60万字/秒的高速处理能力。\n2）采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。\n3）对中英联合支持不是很好,在这方面的处理比较麻烦.需再做一次查询,同时是支持个人词条的优化的词典存储，更小的内存占用。\n4）支持用户词典扩展定义。\n5）针对Lucene全文检索优化的查询分析器IKQueryParser；采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。")]),t._v(" "),e("h4",{attrs:{id:"_5-3-elasticsearch集成ik分词器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-elasticsearch集成ik分词器"}},[t._v("#")]),t._v(" 5.3 ElasticSearch集成IK分词器")]),t._v(" "),e("h5",{attrs:{id:"_5-3-1-ik分词器的安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-ik分词器的安装"}},[t._v("#")]),t._v(" 5.3.1 IK分词器的安装")]),t._v(" "),e("p",[t._v("1）下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases")]),t._v(" "),e("p",[t._v("课程资料也提供了IK分词器的压缩包：")]),t._v(" "),e("p",[t._v("2）解压，将解压后的elasticsearch文件夹拷贝到elasticsearch-5.6.8\\plugins下，并重命名文件夹为analysis-ik")]),t._v(" "),e("p",[t._v("3）重新启动ElasticSearch，即可加载IK分词器")]),t._v(" "),e("h5",{attrs:{id:"_5-3-2-ik分词器测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-ik分词器测试"}},[t._v("#")]),t._v(" 5.3.2 IK分词器测试")]),t._v(" "),e("p",[t._v("IK提供了两个分词算法ik_smart 和 ik_max_word")]),t._v(" "),e("p",[t._v("其中 ik_smart 为最少切分，ik_max_word为最细粒度划分")]),t._v(" "),e("p",[t._v("我们分别来试一下")]),t._v(" "),e("p",[t._v("1）最小切分：在浏览器地址栏输入地址")]),t._v(" "),e("div",{staticClass:"language-url line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-url"}},[e("code",[e("span",{pre:!0,attrs:{class:"token scheme"}},[t._v("http"),e("span",{pre:!0,attrs:{class:"token scheme-delimiter"}},[t._v(":")])]),e("span",{pre:!0,attrs:{class:"token authority"}},[e("span",{pre:!0,attrs:{class:"token authority-delimiter"}},[t._v("//")]),e("span",{pre:!0,attrs:{class:"token host"}},[e("span",{pre:!0,attrs:{class:"token ipv4-address"}},[t._v("127.0.0.1")])]),e("span",{pre:!0,attrs:{class:"token port-segment"}},[e("span",{pre:!0,attrs:{class:"token port-delimiter"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token port"}},[t._v("9200")])])]),e("span",{pre:!0,attrs:{class:"token path"}},[e("span",{pre:!0,attrs:{class:"token path-separator"}},[t._v("/")]),t._v("_analyze")]),e("span",{pre:!0,attrs:{class:"token query"}},[e("span",{pre:!0,attrs:{class:"token query-delimiter"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("analyzer")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("ik_smart")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("pretty")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("true")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("text")]),t._v("=")])]),t._v("我是程序员\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("输出的结果为：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tokens"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_CHAR"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_CHAR"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程序员"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_WORD"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br")])]),e("p",[t._v("2）最细切分：在浏览器地址栏输入地址")]),t._v(" "),e("div",{staticClass:"language-url line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-url"}},[e("code",[e("span",{pre:!0,attrs:{class:"token scheme"}},[t._v("http"),e("span",{pre:!0,attrs:{class:"token scheme-delimiter"}},[t._v(":")])]),e("span",{pre:!0,attrs:{class:"token authority"}},[e("span",{pre:!0,attrs:{class:"token authority-delimiter"}},[t._v("//")]),e("span",{pre:!0,attrs:{class:"token host"}},[e("span",{pre:!0,attrs:{class:"token ipv4-address"}},[t._v("127.0.0.1")])]),e("span",{pre:!0,attrs:{class:"token port-segment"}},[e("span",{pre:!0,attrs:{class:"token port-delimiter"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token port"}},[t._v("9200")])])]),e("span",{pre:!0,attrs:{class:"token path"}},[e("span",{pre:!0,attrs:{class:"token path-separator"}},[t._v("/")]),t._v("_analyze")]),e("span",{pre:!0,attrs:{class:"token query"}},[e("span",{pre:!0,attrs:{class:"token query-delimiter"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("analyzer")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("ik_max_word")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("pretty")]),t._v("="),e("span",{pre:!0,attrs:{class:"token value"}},[t._v("true")])]),e("span",{pre:!0,attrs:{class:"token pair-delimiter"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token pair"}},[e("span",{pre:!0,attrs:{class:"token key"}},[t._v("text")]),t._v("=")])]),t._v("我是程序员\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("输出的结果为：")]),t._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"tokens"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_CHAR"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_CHAR"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程序员"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_WORD"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程序"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_WORD"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"token"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"员"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"end_offset"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CN_CHAR"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"position"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br")])]),e("h4",{attrs:{id:"_5-4-修改索引映射mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-修改索引映射mapping"}},[t._v("#")]),t._v(" 5.4 修改索引映射mapping")]),t._v(" "),e("h5",{attrs:{id:"_5-4-1-重建索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-重建索引"}},[t._v("#")]),t._v(" 5.4.1 重建索引")]),t._v(" "),e("p",[t._v("删除原有blog1索引")]),t._v(" "),e("p",[t._v("DELETE\t\tlocalhost:9200/blog1\n1\n创建blog1索引，此时分词器使用ik_max_word")]),t._v(" "),e("p",[t._v('PUT\t\tlocalhost:9200/blog1\n1\n{\n"mappings": {\n"article": {\n"properties": {\n"id": {\n"type": "long",\n"store": true,\n"index":"not_analyzed"\n},\n"title": {\n"type": "text",\n"store": true,\n"index":"analyzed",\n"analyzer":"ik_max_word"\n},\n"content": {\n"type": "text",\n"store": true,\n"index":"analyzed",\n"analyzer":"ik_max_word"\n}\n}\n}\n}\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n创建文档')]),t._v(" "),e("p",[t._v('POST\tlocalhost:9200/blog1/article/1\n1\n{\n"id":1,\n"title":"ElasticSearch是一个基于Lucene的搜索服务器",\n"content":"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"\n}\n1\n2\n3\n4\n5')]),t._v(" "),e("h5",{attrs:{id:"_5-4-2-再次测试querystring查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-再次测试querystring查询"}},[t._v("#")]),t._v(" 5.4.2 再次测试queryString查询")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("p",[t._v("POST\tlocalhost:9200/blog1/article/_search\n1\n请求体：")]),t._v(" "),e("p",[t._v('{\n"query": {\n"query_string": {\n"default_field": "title",\n"query": "搜索服务器"\n}\n}\n}\n1\n2\n3\n4\n5\n6\n7\n8\npostman截图：')]),t._v(" "),e("p",[t._v("[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cbxx7eG9-1600272635312)(image/57.png)]")]),t._v(" "),e("p",[t._v('将请求体搜索字符串修改为"钢索"，再次查询：')]),t._v(" "),e("p",[t._v('{\n"query": {\n"query_string": {\n"default_field": "title",\n"query": "钢索"\n}\n}\n}\n1\n2\n3\n4\n5\n6\n7\n8\npostman截图：')]),t._v(" "),e("p",[t._v("[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jeapt0jR-1600272635313)(image\\59.png)]")]),t._v(" "),e("h5",{attrs:{id:"_5-4-3-再次测试term测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-3-再次测试term测试"}},[t._v("#")]),t._v(" 5.4.3 再次测试term测试")]),t._v(" "),e("p",[t._v("请求url：")]),t._v(" "),e("p",[t._v("POST\tlocalhost:9200/blog1/article/_search\n1\n请求体：")]),t._v(" "),e("p",[t._v('{\n"query": {\n"term": {\n"title": "搜索"\n}\n}\n}\n1\n2\n3\n4\n5\n6\n7\npostman截图：')]),t._v(" "),e("p",[t._v("[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-IzbRCXdE-1600272635314)(image\\60.png)]")]),t._v(" "),e("p",[t._v("第六章 ElasticSearch集群\nES集群是一个 P2P类型(使用 gossip 协议)的分布式系统，除了集群状态管理以外，其他所有的请求都可以发送到集群内任意一台节点上，这个节点可以自己找到需要转发给哪些节点，并且直接跟这些节点通信。所以，从网络架构及服务配置上来说，构建集群所需要的配置极其简单。在 Elasticsearch 2.0 之前，无阻碍的网络下，所有配置了相同 cluster.name 的节点都自动归属到一个集群中。2.0 版本之后，基于安全的考虑避免开发环境过于随便造成的麻烦，从 2.0 版本开始，默认的自动发现方式改为了单播(unicast)方式。配置里提供几台节点的地址，ES 将其视作 gossip router 角色，借以完成集群的发现。由于这只是 ES 内一个很小的功能，所以 gossip router 角色并不需要单独配置，每个 ES 节点都可以担任。所以，采用单播方式的集群，各节点都配置相同的几个节点列表作为 router 即可。")]),t._v(" "),e("p",[t._v("集群中节点数量没有限制，一般大于等于2个节点就可以看做是集群了。一般处于高性能及高可用方面来考虑一般集群中的节点数量都是3个及3个以上。")]),t._v(" "),e("h4",{attrs:{id:"_6-1-集群的相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-集群的相关概念"}},[t._v("#")]),t._v(" 6.1 集群的相关概念")]),t._v(" "),e("h5",{attrs:{id:"_6-1-1-集群-cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-集群-cluster"}},[t._v("#")]),t._v(" 6.1.1 集群 cluster")]),t._v(" "),e("p",[t._v("一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群")]),t._v(" "),e("h5",{attrs:{id:"_6-1-2-节点-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-节点-node"}},[t._v("#")]),t._v(" 6.1.2 节点 node")]),t._v(" "),e("p",[t._v("一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。")]),t._v(" "),e("p",[t._v("一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。")]),t._v(" "),e("p",[t._v("在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。")]),t._v(" "),e("p",[t._v("6.1.3 分片和复制 shards&replicas\n一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：\n1）允许你水平分割/扩展你的内容容量。\n2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。")]),t._v(" "),e("p",[t._v("至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。")]),t._v(" "),e("p",[t._v("在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。")]),t._v(" "),e("p",[t._v("复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。")]),t._v(" "),e("p",[t._v("默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。")]),t._v(" "),e("h4",{attrs:{id:"_6-2-集群的搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-集群的搭建"}},[t._v("#")]),t._v(" 6.2 集群的搭建")]),t._v(" "),e("h5",{attrs:{id:"_6-2-1-准备三台elasticsearch服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-准备三台elasticsearch服务器"}},[t._v("#")]),t._v(" 6.2.1 准备三台elasticsearch服务器")]),t._v(" "),e("p",[t._v("创建elasticsearch-cluster文件夹，在内部复制三个elasticsearch服务")]),t._v(" "),e("h5",{attrs:{id:"_6-2-2-修改每台服务器配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-修改每台服务器配置"}},[t._v("#")]),t._v(" 6.2.2 修改每台服务器配置")]),t._v(" "),e("p",[t._v("修改elasticsearch-cluster\\node*\\config\\elasticsearch.yml配置文件")]),t._v(" "),e("p",[t._v('node1节点：\n#节点1的配置信息：\n#集群名称，保证唯一\ncluster.name: my-elasticsearch\n#节点名称，必须不一样\nnode.name: node-1\n#必须为本机的ip地址\nnetwork.host: 127.0.0.1\n#服务端口号，在同一机器下必须不一样\nhttp.port: 9200\n#集群间通信端口号，在同一机器下必须不一样\ntransport.tcp.port: 9300\n#设置集群自动发现机器ip集合\ndiscovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9301","127.0.0.1:9302"]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nnode2节点：\n#节点2的配置信息：\n#集群名称，保证唯一\ncluster.name: my-elasticsearch\n#节点名称，必须不一样\nnode.name: node-2\n#必须为本机的ip地址\nnetwork.host: 127.0.0.1\n#服务端口号，在同一机器下必须不一样\nhttp.port: 9201\n#集群间通信端口号，在同一机器下必须不一样\ntransport.tcp.port: 9301\n#设置集群自动发现机器ip集合\ndiscovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9301","127.0.0.1:9302"]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\nnode3节点：\n#节点3的配置信息：\n#集群名称，保证唯一\ncluster.name: my-elasticsearch\n#节点名称，必须不一样\nnode.name: node-3\n#必须为本机的ip地址\nnetwork.host: 127.0.0.1\n#服务端口号，在同一机器下必须不一样\nhttp.port: 9202\n#集群间通信端口号，在同一机器下必须不一样\ntransport.tcp.port: 9302\n#设置集群自动发现机器ip集合\ndiscovery.zen.ping.unicast.hosts: ["127.0.0.1:9300","127.0.0.1:9301","127.0.0.1:9302"]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13')]),t._v(" "),e("h5",{attrs:{id:"_6-2-3-启动各个节点服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-3-启动各个节点服务器"}},[t._v("#")]),t._v(" 6.2.3 启动各个节点服务器")]),t._v(" "),e("p",[t._v("双击elasticsearch-cluster\\node*\\bin\\elasticsearch.bat")]),t._v(" "),e("p",[t._v("启动节点1：\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fGBaIS52-1600272635315)(image\\21.png)]")]),t._v(" "),e("p",[t._v("启动节点2：\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-m9iBOBQR-1600272635316)(image\\22.png)]")]),t._v(" "),e("p",[t._v("启动节点3：\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5ZR8suZp-1600272635318)(image\\23.png)]")]),t._v(" "),e("h5",{attrs:{id:"_6-2-4-集群测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-4-集群测试"}},[t._v("#")]),t._v(" 6.2.4 集群测试")]),t._v(" "),e("p",[t._v('添加索引和映射\nPUT\t\tlocalhost:9200/blog1\n1\n{\n"mappings": {\n"article": {\n"properties": {\n"id": {\n"type": "long",\n"store": true,\n"index":"not_analyzed"\n},\n"title": {\n"type": "text",\n"store": true,\n"index":"analyzed",\n"analyzer":"standard"\n},\n"content": {\n"type": "text",\n"store": true,\n"index":"analyzed",\n"analyzer":"standard"\n}\n}\n}\n}\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n添加文档\nPOST\tlocalhost:9200/blog1/article/1\n1\n{\n"id":1,\n"title":"ElasticSearch是一个基于Lucene的搜索服务器",\n"content":"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"\n}\n1\n2\n3\n4\n5')]),t._v(" "),e("h4",{attrs:{id:"使用elasticsearch-header查看集群情况"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用elasticsearch-header查看集群情况"}},[t._v("#")]),t._v(" 使用elasticsearch-header查看集群情况")]),t._v(" "),e("p",[t._v("[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-0JdmVaRB-1600272635319)(image\\62.png)]")]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-txt"}},[e("code",[t._v('一、使用Java客户端管理ES\n1、创建索引库\n步骤：\n\t1）创建一个Java工程\n\t2）添加jar包，添加maven的坐标\n\t3）编写测试方法实现创建索引库\n\t\t1、创建一个Settings对象，相当于是一个配置信息。主要配置集群的名称。\n\t\t2、创建一个客户端Client对象\n\t\t3、使用client对象创建一个索引库\n\t\t4、关闭client对象\n2、使用Java客户端设置Mappings\n\t步骤：\n\t1）创建一个Settings对象\n\t2）创建一个Client对象\n\t3）创建一个mapping信息，应该是一个json数据，可以是字符串，也可以是XContextBuilder对象\n\t4）使用client向es服务器发送mapping信息\n\t5）关闭client对象\n3、添加文档\n\t步骤：\n\t1）创建一个Settings对象\n\t2）创建一个Client对象\n\t3）创建一个文档对象，创建一个json格式的字符串，或者使用XContentBuilder\n\t4）使用Client对象吧文档添加到索引库中\n\t5）关闭client\n4、添加文档第二种方式\n\t创建一个pojo类\n\t使用工具类把pojo转换成json字符串\n\t把文档写入索引库\n\n二、使用es客户端实现搜索\n1、根据id搜索\n\tQueryBuilder queryBuilder = QueryBuilders.idsQuery().addIds("1", "2");\n2、根据Term查询（关键词）\n\tQueryBuilder queryBuilder = QueryBuilders.termQuery("title", "北方");\n3、QueryString查询方式（带分析的查询）\n\tQueryBuilder queryBuilder = QueryBuilders.queryStringQuery("速度与激情")\n                .defaultField("title");\n查询步骤：\n\t1）创建一个Client对象\n\t2）创建一个查询对象，可以使用QueryBuilders工具类创建QueryBuilder对象。\n\t3）使用client执行查询\n\t4）得到查询的结果。\n\t5）取查询结果的总记录数\n\t6）取查询结果列表\n\t7）关闭client\n4、分页的处理\n\t在client对象执行查询之前，设置分页信息。\n\t然后再执行查询\n\t //执行查询\n        SearchResponse searchResponse = client.prepareSearch("index_hello")\n                .setTypes("article")\n                .setQuery(queryBuilder)\n                //设置分页信息\n                .setFrom(0)\n                //每页显示的行数\n                .setSize(5)\n                .get();\n\t分页需要设置两个值，一个from、size\n\tfrom：起始的行号，从0开始。\n\tsize：每页显示的记录数\n5、查询结果高亮显示\n（1）高亮的配置\n\t1）设置高亮显示的字段\n\t2）设置高亮显示的前缀\n\t3）设置高亮显示的后缀\n（2）在client对象执行查询之前，设置高亮显示的信息。\n（3）遍历结果列表时可以从结果中取高亮结果。\n三、SpringDataElasticSearch\n1、工程搭建\n\t1）创建一个java工程。\n\t2）把相关jar包添加到工程中。如果maven工程就添加坐标。\n\t3）创建一个spring的配置文件\n\t\t1、配置elasticsearch:transport-client\n\t\t2、elasticsearch:repositories：包扫描器，扫描dao\n\t\t3、配置elasticsearchTemplate对象，就是一个bean\n2、管理索引库\n\t1、创建一个Entity类，其实就是一个JavaBean（pojo）映射到一个Document上\n\t\t需要添加一些注解进行标注。\n\t2、创建一个Dao，是一个接口，需要继承ElasticSearchRepository接口。\n\t3、编写测试代码。\n\n\n3、创建索引\n\t直接使用ElasticsearchTemplate对象的createIndex方法创建索引，并配置映射关系。\n4、添加、更新文档\n\t1）创建一个Article对象\n\t2）使用ArticleRepository对象向索引库中添加文档。\n5、删除文档\n\t直接使用ArticleRepository对象的deleteById方法直接删除。\n6、查询索引库\n\t直接使用ArticleRepository对象的查询方法。\n7、自定义查询方法\n\t需要根据SpringDataES的命名规则来命名。\n\t如果不设置分页信息，默认带分页，每页显示10条数据。\n\t如果设置分页信息，应该在方法中添加一个参数Pageable\n\t\tPageable pageable = PageRequest.of(0, 15);\n\t注意：设置分页信息，默认是从0页开始。\n\t\n\n\t可以对搜索的内容先分词然后再进行查询。每个词之间都是and的关系。\n\n8、使用原生的查询条件查询\n\tNativeSearchQuery对象。\n\t使用方法：\n\t\t1）创建一个NativeSearchQuery对象\n\t\t\t设置查询条件，QueryBuilder对象\n\t\t2）使用ElasticSearchTemplate对象执行查询\n\t\t3）取查询结果\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br"),e("span",{staticClass:"line-number"},[t._v("42")]),e("br"),e("span",{staticClass:"line-number"},[t._v("43")]),e("br"),e("span",{staticClass:"line-number"},[t._v("44")]),e("br"),e("span",{staticClass:"line-number"},[t._v("45")]),e("br"),e("span",{staticClass:"line-number"},[t._v("46")]),e("br"),e("span",{staticClass:"line-number"},[t._v("47")]),e("br"),e("span",{staticClass:"line-number"},[t._v("48")]),e("br"),e("span",{staticClass:"line-number"},[t._v("49")]),e("br"),e("span",{staticClass:"line-number"},[t._v("50")]),e("br"),e("span",{staticClass:"line-number"},[t._v("51")]),e("br"),e("span",{staticClass:"line-number"},[t._v("52")]),e("br"),e("span",{staticClass:"line-number"},[t._v("53")]),e("br"),e("span",{staticClass:"line-number"},[t._v("54")]),e("br"),e("span",{staticClass:"line-number"},[t._v("55")]),e("br"),e("span",{staticClass:"line-number"},[t._v("56")]),e("br"),e("span",{staticClass:"line-number"},[t._v("57")]),e("br"),e("span",{staticClass:"line-number"},[t._v("58")]),e("br"),e("span",{staticClass:"line-number"},[t._v("59")]),e("br"),e("span",{staticClass:"line-number"},[t._v("60")]),e("br"),e("span",{staticClass:"line-number"},[t._v("61")]),e("br"),e("span",{staticClass:"line-number"},[t._v("62")]),e("br"),e("span",{staticClass:"line-number"},[t._v("63")]),e("br"),e("span",{staticClass:"line-number"},[t._v("64")]),e("br"),e("span",{staticClass:"line-number"},[t._v("65")]),e("br"),e("span",{staticClass:"line-number"},[t._v("66")]),e("br"),e("span",{staticClass:"line-number"},[t._v("67")]),e("br"),e("span",{staticClass:"line-number"},[t._v("68")]),e("br"),e("span",{staticClass:"line-number"},[t._v("69")]),e("br"),e("span",{staticClass:"line-number"},[t._v("70")]),e("br"),e("span",{staticClass:"line-number"},[t._v("71")]),e("br"),e("span",{staticClass:"line-number"},[t._v("72")]),e("br"),e("span",{staticClass:"line-number"},[t._v("73")]),e("br"),e("span",{staticClass:"line-number"},[t._v("74")]),e("br"),e("span",{staticClass:"line-number"},[t._v("75")]),e("br"),e("span",{staticClass:"line-number"},[t._v("76")]),e("br"),e("span",{staticClass:"line-number"},[t._v("77")]),e("br"),e("span",{staticClass:"line-number"},[t._v("78")]),e("br"),e("span",{staticClass:"line-number"},[t._v("79")]),e("br"),e("span",{staticClass:"line-number"},[t._v("80")]),e("br"),e("span",{staticClass:"line-number"},[t._v("81")]),e("br"),e("span",{staticClass:"line-number"},[t._v("82")]),e("br"),e("span",{staticClass:"line-number"},[t._v("83")]),e("br"),e("span",{staticClass:"line-number"},[t._v("84")]),e("br"),e("span",{staticClass:"line-number"},[t._v("85")]),e("br"),e("span",{staticClass:"line-number"},[t._v("86")]),e("br"),e("span",{staticClass:"line-number"},[t._v("87")]),e("br"),e("span",{staticClass:"line-number"},[t._v("88")]),e("br"),e("span",{staticClass:"line-number"},[t._v("89")]),e("br"),e("span",{staticClass:"line-number"},[t._v("90")]),e("br"),e("span",{staticClass:"line-number"},[t._v("91")]),e("br"),e("span",{staticClass:"line-number"},[t._v("92")]),e("br"),e("span",{staticClass:"line-number"},[t._v("93")]),e("br"),e("span",{staticClass:"line-number"},[t._v("94")]),e("br"),e("span",{staticClass:"line-number"},[t._v("95")]),e("br"),e("span",{staticClass:"line-number"},[t._v("96")]),e("br"),e("span",{staticClass:"line-number"},[t._v("97")]),e("br"),e("span",{staticClass:"line-number"},[t._v("98")]),e("br"),e("span",{staticClass:"line-number"},[t._v("99")]),e("br"),e("span",{staticClass:"line-number"},[t._v("100")]),e("br"),e("span",{staticClass:"line-number"},[t._v("101")]),e("br"),e("span",{staticClass:"line-number"},[t._v("102")]),e("br"),e("span",{staticClass:"line-number"},[t._v("103")]),e("br"),e("span",{staticClass:"line-number"},[t._v("104")]),e("br"),e("span",{staticClass:"line-number"},[t._v("105")]),e("br"),e("span",{staticClass:"line-number"},[t._v("106")]),e("br"),e("span",{staticClass:"line-number"},[t._v("107")]),e("br"),e("span",{staticClass:"line-number"},[t._v("108")]),e("br")])]),e("p",[t._v("ElasticSearch（二）\n学习目标：\n能够使用java客户端完成创建、删除索引的操作\n能够使用java客户端完成文档的增删改的操作\n能够使用java客户端完成文档的查询操作\n能够完成文档的分页操作\n能够完成文档的高亮查询操作\n能够搭建Spring Data ElasticSearch的环境\n能够完成Spring Data ElasticSearch的基本增删改查操作\n能够掌握基本条件查询的方法命名规则\n第一章 ElasticSearch编程操作\n1.1 创建工程，导入坐标\npom.xml坐标")]),t._v(" "),e("dependencies",[e("dependency",[e("groupId",[t._v("org.elasticsearch")]),t._v(" "),e("artifactId",[t._v("elasticsearch")]),t._v(" "),e("version",[t._v("5.6.8")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("org.elasticsearch.client")]),t._v(" "),e("artifactId",[t._v("transport")]),t._v(" "),e("version",[t._v("5.6.8")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("org.apache.logging.log4j")]),t._v(" "),e("artifactId",[t._v("log4j-to-slf4j")]),t._v(" "),e("version",[t._v("2.9.1")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("org.slf4j")]),t._v(" "),e("artifactId",[t._v("slf4j-api")]),t._v(" "),e("version",[t._v("1.7.24")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("org.slf4j")]),t._v(" "),e("artifactId",[t._v("slf4j-simple")]),t._v(" "),e("version",[t._v("1.7.21")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("log4j")]),t._v(" "),e("artifactId",[t._v("log4j")]),t._v(" "),e("version",[t._v("1.2.12")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("junit")]),t._v(" "),e("artifactId",[t._v("junit")]),t._v(" "),e("version",[t._v("4.12")])],1)],1),t._v('\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n1.2 创建索引index\n@Test\n//创建索引\npublic void test1() throws Exception{\n    // 创建Client连接对象\n    Settings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\n    TransportClient client = new PreBuiltTransportClient(settings)\n        .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));\n    //创建名称为blog2的索引\n    client.admin().indices().prepareCreate("blog2").get();\n    //释放资源\n    client.close();\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n'),e("p",[t._v('1.3 创建映射mapping\n@Test\n//创建映射\npublic void test3() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('// 添加映射\n/**\n     * 格式：\n     * "mappings" : {\n         "article" : {\n            "dynamic" : "false",\n             "properties" : {\n                "id" : { "type" : "string" },\n                 "content" : { "type" : "string" },\n                "author" : { "type" : "string" }\n             }\n        }\n     }\n     */\nXContentBuilder builder = XContentFactory.jsonBuilder()\n    .startObject()\n    .startObject("article")\n    .startObject("properties")\n    .startObject("id")\n    .field("type", "integer").field("store", "yes")\n    .endObject()\n    .startObject("title")\n    .field("type", "string").field("store", "yes").field("analyzer", "ik_smart")\n    .endObject()\n    .startObject("content")\n    .field("type", "string").field("store", "yes").field("analyzer", "ik_smart")\n    .endObject()\n    .endObject()\n    .endObject()\n    .endObject();\n// 创建映射\nPutMappingRequest mapping = Requests.putMappingRequest("blog2")\n    .type("article").source(builder);\nclient.admin().indices().putMapping(mapping).get();\n//释放资源\nclient.close();\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45")]),t._v(" "),e("p",[t._v('1.4 建立文档document\n1.4.1 建立文档（通过XContentBuilder）\n@Test\n//创建文档(通过XContentBuilder)\npublic void test4() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('//创建文档信息\nXContentBuilder builder = XContentFactory.jsonBuilder()\n    .startObject()\n    .field("id", 1)\n    .field("title", "ElasticSearch是一个基于Lucene的搜索服务器")\n    .field("content",\n           "它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。")\n    .endObject();\n\n// 建立文档对象\n/**\n     * 参数一blog1：表示索引对象\n     * 参数二article：类型\n     * 参数三1：建立id\n     */\nclient.prepareIndex("blog2", "article", "1").setSource(builder).get();\n\n//释放资源\nclient.close();\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28")]),t._v(" "),e("p",[t._v("1.4.2 建立文档（使用Jackson转换实体）\n1）创建Article实体")]),t._v(" "),e("p",[t._v("public class Article {\nprivate Integer id;\nprivate String title;\nprivate String content;\ngetter/setter...\n}\n1\n2\n3\n4\n5\n6\n2）添加jackson坐标")]),t._v(" "),e("dependency",[e("groupId",[t._v("com.fasterxml.jackson.core")]),t._v(" "),e("artifactId",[t._v("jackson-core")]),t._v(" "),e("version",[t._v("2.8.1")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("com.fasterxml.jackson.core")]),t._v(" "),e("artifactId",[t._v("jackson-databind")]),t._v(" "),e("version",[t._v("2.8.1")])],1),t._v(" "),e("dependency",[e("groupId",[t._v("com.fasterxml.jackson.core")]),t._v(" "),e("artifactId",[t._v("jackson-annotations")]),t._v(" "),e("version",[t._v("2.8.1")])],1),t._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n3）代码实现\n"),e("p",[t._v('@Test\n//创建文档(通过实体转json)\npublic void test5() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('// 描述json 数据\n//{id:xxx, title:xxx, content:xxx}\nArticle article = new Article();\narticle.setId(2);\narticle.setTitle("搜索工作其实很快乐");\narticle.setContent("我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。");\n\nObjectMapper objectMapper = new ObjectMapper();\n\n// 建立文档\nclient.prepareIndex("blog2", "article", article.getId().toString())\n    //.setSource(objectMapper.writeValueAsString(article)).get();\n    .setSource(objectMapper.writeValueAsString(article).getBytes(), XContentType.JSON).get();\n\n//释放资源\nclient.close();\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25")]),t._v(" "),e("p",[t._v('1.5 查询文档操作\n1.5.1关键词查询\n@Test\npublic void testTermQuery() throws Exception{\n//1、创建es客户端连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('//2、设置搜索条件\nSearchResponse searchResponse = client.prepareSearch("blog2")\n    .setTypes("article")\n    .setQuery(QueryBuilders.termQuery("content", "搜索")).get();\n\n//3、遍历搜索结果数据\nSearchHits hits = searchResponse.getHits(); // 获取命中次数，查询结果有多少对象\nSystem.out.println("查询结果有：" + hits.getTotalHits() + "条");\nIterator<SearchHit> iterator = hits.iterator();\nwhile (iterator.hasNext()) {\n    SearchHit searchHit = iterator.next(); // 每个查询对象\n    System.out.println(searchHit.getSourceAsString()); // 获取字符串格式打印\n    System.out.println("title:" + searchHit.getSource().get("title"));\n}\n\n//4、释放资源\nclient.close();\n')])])]),e("p",[t._v('}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n2.5.2 字符串查询\n@Test\npublic void testStringQuery() throws Exception{\n//1、创建es客户端连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('//2、设置搜索条件\nSearchResponse searchResponse = client.prepareSearch("blog2")\n    .setTypes("article")\n    .setQuery(QueryBuilders.queryStringQuery("搜索")).get();\n\n//3、遍历搜索结果数据\nSearchHits hits = searchResponse.getHits(); // 获取命中次数，查询结果有多少对象\nSystem.out.println("查询结果有：" + hits.getTotalHits() + "条");\nIterator<SearchHit> iterator = hits.iterator();\nwhile (iterator.hasNext()) {\n    SearchHit searchHit = iterator.next(); // 每个查询对象\n    System.out.println(searchHit.getSourceAsString()); // 获取字符串格式打印\n    System.out.println("title:" + searchHit.getSource().get("title"));\n}\n\n//4、释放资源\nclient.close();\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v('1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n2.5.2 使用文档ID查询文档\n@Test\npublic void testIdQuery() throws Exception {\n//client对象为TransportClient对象\nSearchResponse response = client.prepareSearch("blog1")\n.setTypes("article")\n//设置要查询的id\n.setQuery(QueryBuilders.idsQuery().addIds("test002"))\n//执行查询\n.get();\n//取查询结果\nSearchHits searchHits = response.getHits();\n//取查询结果总记录数\nSystem.out.println(searchHits.getTotalHits());\nIterator'),e("SearchHit",[t._v(' hitIterator = searchHits.iterator();\nwhile(hitIterator.hasNext()) {\nSearchHit searchHit = hitIterator.next();\n//打印整行数据\nSystem.out.println(searchHit.getSourceAsString());\n}\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n2.6 查询文档分页操作\n2.6.1 批量插入数据\n@Test\n//批量插入100条数据\npublic void test9() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')])],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('    ObjectMapper objectMapper = new ObjectMapper();\n\n    for (int i = 1; i <= 100; i++) {\n        // 描述json 数据\n        Article article = new Article();\n        article.setId(i);\n        article.setTitle(i + "搜索工作其实很快乐");\n        article.setContent(i\n                + "我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。");\n\n        // 建立文档\n        client.prepareIndex("blog2", "article", article.getId().toString())\n                //.setSource(objectMapper.writeValueAsString(article)).get();\n                .setSource(objectMapper.writeValueAsString(article).getBytes(),XContentType.JSON).get();\n    }\n\n    //释放资源\n    client.close();\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27")]),t._v(" "),e("p",[t._v('2.6.2 分页查询\n@Test\n//分页查询\npublic void test10() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('// 搜索数据\nSearchRequestBuilder searchRequestBuilder = client.prepareSearch("blog2").setTypes("article")\n    .setQuery(QueryBuilders.matchAllQuery());//默认每页10条记录\n\n// 查询第2页数据，每页20条\n//setFrom()：从第几条开始检索，默认是0。\n//setSize():每页最多显示的记录数。\nsearchRequestBuilder.setFrom(0).setSize(5);\nSearchResponse searchResponse = searchRequestBuilder.get();\n\nSearchHits hits = searchResponse.getHits(); // 获取命中次数，查询结果有多少对象\nSystem.out.println("查询结果有：" + hits.getTotalHits() + "条");\nIterator<SearchHit> iterator = hits.iterator();\nwhile (iterator.hasNext()) {\n    SearchHit searchHit = iterator.next(); // 每个查询对象\n    System.out.println(searchHit.getSourceAsString()); // 获取字符串格式打印\n    System.out.println("id:" + searchHit.getSource().get("id"));\n    System.out.println("title:" + searchHit.getSource().get("title"));\n    System.out.println("content:" + searchHit.getSource().get("content"));\n    System.out.println("-----------------------------------------");\n}\n\n//释放资源\nclient.close();\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9qAkQsOk-1600271923061)(image/13.png)]")]),t._v(" "),e("p",[t._v("2.7 查询结果高亮操作\n2.7.1 什么是高亮显示\n在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮")]),t._v(" "),e("p",[t._v('百度搜索关键字"ElasticSearch"')]),t._v(" "),e("p",[t._v('京东商城搜索"笔记本"')]),t._v(" "),e("p",[t._v("2.7.2 高亮显示的html分析\n通过开发者工具查看高亮数据的html代码实现：")]),t._v(" "),e("p",[t._v("ElasticSearch可以对查询出的内容中关键字部分进行标签和样式的设置，但是你需要告诉ElasticSearch使用什么标签对高亮关键字进行包裹")]),t._v(" "),e("p",[t._v('2.7.3 高亮显示代码实现\n@Test\n//高亮查询\npublic void test11() throws Exception{\n// 创建Client连接对象\nSettings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();\nTransportClient client = new PreBuiltTransportClient(settings)\n.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName("127.0.0.1"), 9300));')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('// 搜索数据\nSearchRequestBuilder searchRequestBuilder = client\n    .prepareSearch("blog2").setTypes("article")\n    .setQuery(QueryBuilders.termQuery("title", "搜索"));\n\n//设置高亮数据\nHighlightBuilder hiBuilder=new HighlightBuilder();\nhiBuilder.preTags("<font style=\'color:red\'>");\nhiBuilder.postTags("</font>");\nhiBuilder.field("title");\nsearchRequestBuilder.highlighter(hiBuilder);\n\n//获得查询结果数据\nSearchResponse searchResponse = searchRequestBuilder.get();\n\n//获取查询结果集\nSearchHits searchHits = searchResponse.getHits();\nSystem.out.println("共搜到:"+searchHits.getTotalHits()+"条结果!");\n//遍历结果\nfor(SearchHit hit:searchHits){\n    System.out.println("String方式打印文档搜索内容:");\n    System.out.println(hit.getSourceAsString());\n    System.out.println("Map方式打印高亮内容");\n    System.out.println(hit.getHighlightFields());\n\n    System.out.println("遍历高亮集合，打印高亮片段:");\n    Text[] text = hit.getHighlightFields().get("title").getFragments();\n    for (Text str : text) {\n        System.out.println(str);\n    }\n}\n\n//释放资源\nclient.close();\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43")]),t._v(" "),e("p",[t._v("第三章 Spring Data ElasticSearch 使用\n3.1 Spring Data ElasticSearch简介\n3.1.1 什么是Spring Data\nSpring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。 Spring Data可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。")]),t._v(" "),e("p",[t._v("Spring Data的官网：http://projects.spring.io/spring-data/")]),t._v(" "),e("p",[t._v("Spring Data常用的功能模块如下：")]),t._v(" "),e("p",[t._v("3.1.2 什么是Spring Data ElasticSearch\nSpring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。")]),t._v(" "),e("p",[t._v("官方网站：http://projects.spring.io/spring-data-elasticsearch/")]),t._v(" "),e("p",[t._v("3.2 Spring Data ElasticSearch入门\n1）导入Spring Data ElasticSearch坐标")]),t._v('\n<?xml version="1.0" encoding="UTF-8"?>\n'),e("p",[e("project",{attrs:{xmlns:"http://maven.apache.org/POM/4.0.0","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xsi:schemaLocation":"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"}},[e("modelVersion",[t._v("4.0.0")])],1)],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("<groupId>com.itheima</groupId>\n<artifactId>itheima_elasticsearch_demo3</artifactId>\n<version>1.0-SNAPSHOT</version>\n\n\n<dependencies>\n    <dependency>\n        <groupId>org.elasticsearch</groupId>\n        <artifactId>elasticsearch</artifactId>\n        <version>5.6.8</version>\n    </dependency>\n    <dependency>\n        <groupId>org.elasticsearch.client</groupId>\n        <artifactId>transport</artifactId>\n        <version>5.6.8</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.logging.log4j</groupId>\n        <artifactId>log4j-to-slf4j</artifactId>\n        <version>2.9.1</version>\n    </dependency>\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-api</artifactId>\n        <version>1.7.24</version>\n    </dependency>\n    <dependency>\n        <groupId>org.slf4j</groupId>\n        <artifactId>slf4j-simple</artifactId>\n        <version>1.7.21</version>\n    </dependency>\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.12</version>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n\n\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-core</artifactId>\n        <version>2.8.1</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.8.1</version>\n    </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>2.8.1</version>\n    </dependency>\n\n\n    <dependency>\n        <groupId>org.springframework.data</groupId>\n        <artifactId>spring-data-elasticsearch</artifactId>\n        <version>3.0.5.RELEASE</version>\n        <exclusions>\n            <exclusion>\n                <groupId>org.elasticsearch.plugin</groupId>\n                <artifactId>transport-netty4-client</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-test</artifactId>\n        <version>5.0.4.RELEASE</version>\n    </dependency>\n\n</dependencies>\n")])])]),t._v('\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n2）创建applicationContext.xml配置文件，引入elasticsearch命名空间\n<?xml version="1.0" encoding="UTF-8"?>\n'),e("p",[e("beans",{attrs:{xmlns:"http://www.springframework.org/schema/beans","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xmlns:context":"http://www.springframework.org/schema/context","xmlns:elasticsearch":"http://www.springframework.org/schema/data/elasticsearch","xsi:schemaLocation":"\n\t\thttp://www.springframework.org/schema/beans \n\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context \n\t\thttp://www.springframework.org/schema/context/spring-context.xsd\n\t\thttp://www.springframework.org/schema/data/elasticsearch\n\t\thttp://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd\n\t\t"}})],1),t._v(" "),t._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n3）编写实体Article\n"),e("p",[t._v("package com.itheima.domain;")]),t._v(" "),e("p",[t._v("public class Article {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('private Integer id;\nprivate String title;\nprivate String content;\npublic Integer getId() {\n    return id;\n}\npublic void setId(Integer id) {\n    this.id = id;\n}\npublic String getTitle() {\n    return title;\n}\npublic void setTitle(String title) {\n    this.title = title;\n}\npublic String getContent() {\n    return content;\n}\npublic void setContent(String content) {\n    this.content = content;\n}\n@Override\npublic String toString() {\n    return "Article [id=" + id + ", title=" + title + ", content=" + content + "]";\n}\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n4）编写Dao")]),t._v(" "),e("p",[t._v("package com.itheima.dao;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;")]),t._v(" "),e("p",[t._v("@Repository\npublic interface ArticleRepository extends ElasticsearchRepository<Article, Integer> {")]),t._v(" "),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n5）编写Service")]),t._v(" "),e("p",[t._v("package com.itheima.service;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;")]),t._v(" "),e("p",[t._v("public interface ArticleService {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("public void save(Article article);\n")])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\npackage com.itheima.service.impl;")]),t._v(" "),e("p",[t._v("import com.itheima.dao.ArticleRepository;\nimport com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;")]),t._v(" "),e("p",[t._v("@Service\npublic class ArticleServiceImpl implements ArticleService {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("@Autowired\nprivate ArticleRepository articleRepository;\n\npublic void save(Article article) {\n    articleRepository.save(article);\n}\n")])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n6） 配置applicationContext.xml")]),t._v('\n<?xml version="1.0" encoding="UTF-8"?>\n'),e("p",[e("beans",{attrs:{xmlns:"http://www.springframework.org/schema/beans","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xmlns:context":"http://www.springframework.org/schema/context","xmlns:elasticsearch":"http://www.springframework.org/schema/data/elasticsearch","xsi:schemaLocation":"\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context.xsd\n\t\thttp://www.springframework.org/schema/data/elasticsearch\n\t\thttp://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd\n\t\t"}})],1),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('\x3c!-- 扫描Dao包，自动创建实例 --\x3e\n<elasticsearch:repositories base-package="com.itheima.dao"/>\n\n\x3c!-- 扫描Service包，创建Service的实体 --\x3e\n<context:component-scan base-package="com.itheima.service"/>\n\n\x3c!-- 配置elasticSearch的连接 --\x3e\n    \x3c!-- 配置elasticSearch的连接 --\x3e\n<elasticsearch:transport-client id="client" cluster-nodes="localhost:9300" cluster-name="my-elasticsearch"/>\n\n\n\x3c!-- ElasticSearch模版对象 --\x3e\n<bean id="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">\n    <constructor-arg name="client" ref="client"></constructor-arg>\n</bean>\n')])])]),t._v("\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n7）配置实体\n"),e("p",[t._v("基于spring data elasticsearch注解配置索引、映射和实体的关系")]),t._v(" "),e("p",[t._v("package com.itheima.domain;")]),t._v(" "),e("p",[t._v("import org.springframework.data.annotation.Id;\nimport org.springframework.data.elasticsearch.annotations.Document;\nimport org.springframework.data.elasticsearch.annotations.Field;\nimport org.springframework.data.elasticsearch.annotations.FieldType;")]),t._v(" "),e("p",[t._v('//@Document 文档对象 （索引信息、文档类型 ）\n@Document(indexName="blog3",type="article")\npublic class Article {')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('//@Id 文档主键 唯一标识\n@Id\n//@Field 每个文档的字段配置（类型、是否分词、是否存储、分词器 ）\n@Field(store=true, index = false,type = FieldType.Integer)\nprivate Integer id;\n@Field(index=true,analyzer="ik_smart",store=true,searchAnalyzer="ik_smart",type = FieldType.text)\nprivate String title;\n@Field(index=true,analyzer="ik_smart",store=true,searchAnalyzer="ik_smart",type = FieldType.text)\nprivate String content;\npublic Integer getId() {\n    return id;\n}\npublic void setId(Integer id) {\n    this.id = id;\n}\npublic String getTitle() {\n    return title;\n}\npublic void setTitle(String title) {\n    this.title = title;\n}\npublic String getContent() {\n    return content;\n}\npublic void setContent(String content) {\n    this.content = content;\n}\n@Override\npublic String toString() {\n    return "Article [id=" + id + ", title=" + title + ", content=" + content + "]";\n}\n')])])]),e("p",[t._v('}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n其中，注解解释如下：\n@Document(indexName="blob3",type="article")：\nindexName：索引的名称（必填项）\ntype：索引的类型\n@Id：主键的唯一标识\n@Field(index=true,analyzer="ik_smart",store=true,searchAnalyzer="ik_smart",type = FieldType.text)\nindex：是否设置分词\nanalyzer：存储时使用的分词器\nsearchAnalyze：搜索时使用的分词器\nstore：是否存储\ntype: 数据类型\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n8）创建测试类SpringDataESTest')]),t._v(" "),e("p",[t._v("package com.itheima.test;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;")]),t._v(" "),e("p",[t._v('@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations="classpath:applicationContext.xml")\npublic class SpringDataESTest {')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Autowired\nprivate ArticleService articleService;\n\n@Autowired\nprivate TransportClient client;\n\n@Autowired\nprivate ElasticsearchTemplate elasticsearchTemplate;\n\n/**创建索引和映射*/\n@Test\npublic void createIndex(){\n    elasticsearchTemplate.createIndex(Article.class);\n    elasticsearchTemplate.putMapping(Article.class);\n}\n\n/**测试保存文档*/\n@Test\npublic void saveArticle(){\n    Article article = new Article();\n    article.setId(100);\n    article.setTitle("测试SpringData ElasticSearch");\n    article.setContent("Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \\n" +\n            "    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎");\n    articleService.save(article);\n}\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n3.3 Spring Data ElasticSearch的常用操作\n3.3.1 增删改查方法测试\npackage com.itheima.service;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;")]),t._v(" "),e("p",[t._v("public interface ArticleService {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("//保存\npublic void save(Article article);\n//删除\npublic void delete(Article article);\n//查询全部\npublic Iterable<Article> findAll();\n//分页查询\npublic Page<Article> findAll(Pageable pageable);\n")])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\npackage com.itheima.service.impl;")]),t._v(" "),e("p",[t._v("import com.itheima.dao.ArticleRepository;\nimport com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;")]),t._v(" "),e("p",[t._v("@Service\npublic class ArticleServiceImpl implements ArticleService {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("@Autowired\nprivate ArticleRepository articleRepository;\n\npublic void save(Article article) {\n    articleRepository.save(article);\n}\n\npublic void delete(Article article) {\n    articleRepository.delete(article);\n}\n\npublic Iterable<Article> findAll() {\n    Iterable<Article> iter = articleRepository.findAll();\n    return iter;\n}\n\npublic Page<Article> findAll(Pageable pageable) {\n    return articleRepository.findAll(pageable);\n}\n")])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\npackage com.itheima.test;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;")]),t._v(" "),e("p",[t._v('@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations="classpath:applicationContext.xml")\npublic class SpringDataESTest {')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Autowired\nprivate ArticleService articleService;\n\n@Autowired\nprivate TransportClient client;\n\n@Autowired\nprivate ElasticsearchTemplate elasticsearchTemplate;\n\n/**创建索引和映射*/\n@Test\npublic void createIndex(){\n    elasticsearchTemplate.createIndex(Article.class);\n    elasticsearchTemplate.putMapping(Article.class);\n}\n\n/**测试保存文档*/\n@Test\npublic void saveArticle(){\n    Article article = new Article();\n    article.setId(100);\n    article.setTitle("测试SpringData ElasticSearch");\n    article.setContent("Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 \\n" +\n            "    Spring Data为Elasticsearch Elasticsearch项目提供集成搜索引擎");\n    articleService.save(article);\n}\n\n/**测试保存*/\n@Test\npublic void save(){\n    Article article = new Article();\n    article.setId(1001);\n    article.setTitle("elasticSearch 3.0版本发布");\n    article.setContent("ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口");\n    articleService.save(article);\n}\n\n/**测试更新*/\n@Test\npublic void update(){\n    Article article = new Article();\n    article.setId(1001);\n    article.setTitle("elasticSearch 3.0版本发布...更新");\n    article.setContent("ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口");\n    articleService.save(article);\n}\n\n/**测试删除*/\n@Test\npublic void delete(){\n    Article article = new Article();\n    article.setId(1001);\n    articleService.delete(article);\n}\n\n/**批量插入*/\n@Test\npublic void save100(){\n    for(int i=1;i<=100;i++){\n        Article article = new Article();\n        article.setId(i);\n        article.setTitle(i+"elasticSearch 3.0版本发布..，更新");\n        article.setContent(i+"ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口");\n        articleService.save(article);\n    }\n}\n\n/**分页查询*/\n@Test\npublic void findAllPage(){\n    Pageable pageable = PageRequest.of(1,10);\n    Page<Article> page = articleService.findAll(pageable);\n    for(Article article:page.getContent()){\n        System.out.println(article);\n    }\n}\n')])])]),e("p",[t._v("}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n3.3.2 常用查询命名规则\n关键字\t命名规则\t解释\t示例\nand\tfindByField1AndField2\t根据Field1和Field2获得数据\tfindByTitleAndContent\nor\tfindByField1OrField2\t根据Field1或Field2获得数据\tfindByTitleOrContent\nis\tfindByField\t根据Field获得数据\tfindByTitle\nnot\tfindByFieldNot\t根据Field获得补集数据\tfindByTitleNot\nbetween\tfindByFieldBetween\t获得指定范围的数据\tfindByPriceBetween\nlessThanEqual\tfindByFieldLessThan\t获得小于等于指定值的数据\tfindByPriceLessThan\n3.3.3 查询方法测试\n1）dao层实现")]),t._v(" "),e("p",[t._v("package com.itheima.dao;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\nimport java.util.List;")]),t._v(" "),e("p",[t._v("public interface ArticleRepository extends ElasticsearchRepository<Article, Integer> {\n//根据标题查询\nList"),e("Article",[t._v(" findByTitle(String condition);\n//根据标题查询(含分页)\nPage"),e("Article",[t._v(" findByTitle(String condition, Pageable pageable);\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n2）service层实现")])],1)],1),t._v(" "),e("p",[t._v("public interface ArticleService {\n//根据标题查询\nList"),e("Article",[t._v(" findByTitle(String condition);\n//根据标题查询(含分页)\nPage"),e("Article",[t._v(" findByTitle(String condition, Pageable pageable);\n}\n1\n2\n3\n4\n5\n6\npackage com.itheima.service.impl;")])],1)],1),t._v(" "),e("p",[t._v("import com.itheima.dao.ArticleRepository;\nimport com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;")]),t._v(" "),e("p",[t._v("import java.util.List;")]),t._v(" "),e("p",[t._v("@Service\npublic class ArticleServiceImpl implements ArticleService {")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("@Autowired\nprivate ArticleRepository articleRepository;\n\npublic List<Article> findByTitle(String condition) {\n    return articleRepository.findByTitle(condition);\n}\npublic Page<Article> findByTitle(String condition, Pageable pageable) {\n    return articleRepository.findByTitle(condition,pageable);\n}\n")])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n3）测试代码")]),t._v(" "),e("p",[t._v("package com.itheima.test;")]),t._v(" "),e("p",[t._v("import com.itheima.domain.Article;\nimport com.itheima.service.ArticleService;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;")]),t._v(" "),e("p",[t._v("import java.util.List;")]),t._v(" "),e("p",[t._v('@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations="classpath:applicationContext.xml")\npublic class SpringDataESTest {')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Autowired\nprivate ArticleService articleService;\n\n@Autowired\nprivate TransportClient client;\n\n@Autowired\nprivate ElasticsearchTemplate elasticsearchTemplate;\n\n/**条件查询*/\n@Test\npublic void findByTitle(){\n    String condition = "版本";\n    List<Article> articleList = articleService.findByTitle(condition);\n    for(Article article:articleList){\n        System.out.println(article);\n    }\n}\n\n/**条件分页查询*/\n@Test\npublic void findByTitlePage(){\n    String condition = "版本";\n    Pageable pageable = PageRequest.of(2,10);\n    Page<Article> page = articleService.findByTitle(condition,pageable);\n    for(Article article:page.getContent()){\n        System.out.println(article);\n    }\n}\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v('1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n3.3.4使用Elasticsearch的原生查询对象进行查询。\n@Test\npublic void findByNativeQuery() {\n//创建一个SearchQuery对象\nSearchQuery searchQuery = new NativeSearchQueryBuilder()\n//设置查询条件，此处可以使用QueryBuilders创建多种查询\n.withQuery(QueryBuilders.queryStringQuery("备份节点上没有数据").defaultField("title"))\n//还可以设置分页信息\n.withPageable(PageRequest.of(1, 5))\n//创建SearchQuery对象\n.build();')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("    //使用模板对象执行查询\n    elasticsearchTemplate.queryForList(searchQuery, Article.class)\n            .forEach(a-> System.out.println(a));\n}\n")])])]),e("p",[t._v("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n部分代码\npackage com.sw.fam.service.ais.impl;")]),t._v(" "),e("p",[t._v("import com.sw.fam.service.ais.AisService;\nimport com.sw.fam.utils.FileComponent;\nimport com.sw.fam.vo.ais.IndexEntityVO;\nimport com.sw.fam.vo.ais.ReturnBean;\nimport com.sw.fam.vo.ais.SearchBean;\nimport com.sw.seeker.common.util.CurrentUser;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.text.Text;\nimport org.elasticsearch.index.query.BoolQueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.index.query.QueryStringQueryBuilder;\nimport org.elasticsearch.search.SearchHit;\nimport org.elasticsearch.search.SearchHits;\nimport org.elasticsearch.search.aggregations.Aggregation;\nimport org.elasticsearch.search.aggregations.AggregationBuilder;\nimport org.elasticsearch.search.aggregations.AggregationBuilders;\nimport org.elasticsearch.search.aggregations.bucket.terms.ParsedStringTerms;\nimport org.elasticsearch.search.aggregations.bucket.terms.Terms;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;\nimport org.elasticsearch.search.fetch.subphase.highlight.HighlightField;\nimport org.elasticsearch.search.sort.SortOrder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;")]),t._v(" "),e("p",[t._v("import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Pattern;")]),t._v(" "),e("p",[t._v("/**")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("@author ganquanzhong")])]),t._v(" "),e("li",[e("p",[t._v("@version v1.0")])]),t._v(" "),e("li",[e("p",[t._v("@description 检索服务接口实现类")])]),t._v(" "),e("li",[e("p",[t._v("@since 2020-09-21 v1.0\n**/\n@Service\npublic class AisServiceImpl implements AisService {")]),t._v(" "),e("p",[t._v("@Autowired\nprivate RestHighLevelClient restHighLevelClient;")]),t._v(" "),e("p",[t._v("@Autowired\nprivate FileComponent fileComponent;")]),t._v(" "),e("p",[t._v("/**")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("@param param {@link com.sw.fam.vo.ais.SearchBean} 请求参数")])]),t._v(" "),e("li",[e("p",[t._v("@return ReturnBean {@link com.sw.fam.vo.ais.ReturnBean} 返回结果")])]),t._v(" "),e("li",[e("p",[t._v("@throws IOException 检索异常")])]),t._v(" "),e("li",[e("p",[t._v("@description 全部 全文检索")])]),t._v(" "),e("li",[e("p",[t._v('@create ganquanzhong 2020/09/21\n*/\n@Override\npublic ReturnBean search(SearchBean param) throws IOException {\n//最终的请求体\nSearchRequest searchRequest = null;\nString indexName = param.getClusterName();\nString searchValue = param.getSearchValue();\n// 1.构建SearchRequest检索请求\n// 专门用来进行全文检索、关键字检索的API\nif (indexName == null || "".equals(indexName)) {\nsearchRequest = new SearchRequest();\n} else {\nsearchRequest = new SearchRequest(indexName);\n}')]),t._v(" "),e("p",[t._v("// 2.创建一个SearchSourceBuilder专门用于构建查询条件\nSearchSourceBuilder sourceBuilder = new SearchSourceBuilder();")]),t._v(" "),e("p",[t._v('//使用BoolQueryBuilder进行复合查询  过滤字段，效率高于must\nBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n// 输入框  查询条件\nif (searchValue == null || searchValue.isEmpty()) {\nsourceBuilder.query(QueryBuilders.matchAllQuery());\n} else {\nString reg = "^[a-z0-9A-Z]+$";\n// 判断输入的内容是否完全由数字或字母组成 大写转为小写\nboolean flag = Pattern.compile(reg).matcher(searchValue).matches();\nif (flag) {\nsearchValue = "'),e("em",[t._v('" + searchValue + "')]),t._v('";\n}\nQueryStringQueryBuilder builder = new QueryStringQueryBuilder(searchValue)\n.fields(IndexEntityVO.getSearchField().get(indexName))\n.analyzer("ik_smart");\nboolQueryBuilder.must(builder);\n}')]),t._v(" "),e("p",[t._v('// 分组条件  entrySet遍历，在键和值都需要时使用（最常用）   此处是遍历传入的字段限定,为完全符合\nBoolQueryBuilder mustQueryBuilder = QueryBuilders.boolQuery();\nif (param.getSearchMap() != null && param.getSearchMap().size() > 0) {\nfor (Map.Entry<String, Object> entry : param.getSearchMap().entrySet()) {\n//判断组织id\nif ("orgId".equals(entry.getKey())) {\nString orgIds = CurrentUser.getOrgIds();\nString newOrgIds = orgIds.replace("\'", "");\nString[] split = newOrgIds.split(",");\nif (split.length > 0) {\nboolQueryBuilder.filter(QueryBuilders.termsQuery(entry.getKey(), split));\n}\ncontinue;\n}\n//处理排序\nif (entry.getValue() != null && "order".equals(entry.getKey())) {\n// searchMap中键值为es中索引的字段，值为arrayList封装的\nArrayList'),e("String",[t._v(" terms = (ArrayList"),e("String",[t._v(') entry.getValue();\nif (terms.size() > 0) {\nterms.forEach(item -> {\nsourceBuilder.sort(item, SortOrder.DESC);\n});\n}\n} else {\n//处理条件查询\nif (entry.getValue() != null && !"".equals(entry.getValue())) {\nif (entry.getValue() instanceof ArrayList) {\n// searchMap中键值为es中索引的字段，值为arrayList封装的\nArrayList'),e("String",[t._v(" terms = (ArrayList"),e("String",[t._v(') entry.getValue();\nBoolQueryBuilder shouldQueryBuilder = QueryBuilders.boolQuery();\nif (terms.size() > 0) {\nterms.forEach(item -> {\nshouldQueryBuilder.should(QueryBuilders.termQuery(entry.getKey(), item));\n});\nmustQueryBuilder.must(shouldQueryBuilder);\n}\n} else {\nboolQueryBuilder.filter(QueryBuilders.termQuery(entry.getKey(), entry.getValue()));\n}\n}\n}\n}\n}\nboolQueryBuilder.must(mustQueryBuilder);\n//匹配度倒数，数值越大匹配度越高\nsourceBuilder.sort("_score", SortOrder.DESC);')])],1)],1)],1)],1),t._v(" "),e("p",[t._v('// 给请求设置需要高亮显示的字段\nHighlightBuilder highlightBuilder = new HighlightBuilder();\nList highlightFieldList = IndexEntityVO.getHighlightField().get(indexName);\nif (CollectionUtils.isNotEmpty(highlightFieldList)) {\nfor (int i = 0; i < highlightFieldList.size(); i++) {\nString name = highlightFieldList.get(i).toString();\nHighlightBuilder.Field highlight =\nnew HighlightBuilder.Field(name).preTags("'),e("span",[t._v('").postTags("')]),t._v('").fragmentSize(200).numOfFragments(1);\nhighlight.highlighterType("unified");\nhighlightBuilder.field(highlight);\n}\n}\nsourceBuilder.highlighter(highlightBuilder);')]),t._v(" "),e("p",[t._v("//分页处理\nsourceBuilder.query(boolQueryBuilder).from((param.getPageNum() - 1) * param.getPageSize()).size(param.getPageSize());")]),t._v(" "),e("p",[t._v("// 4.调用SearchRequest.source将查询条件设置到检索请求\nsearchRequest.source(sourceBuilder);")]),t._v(" "),e("p",[t._v("// 5.执行RestHighLevelClient.search发起请求\nSearchResponse response = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);")]),t._v(" "),e("p",[t._v("ReturnBean returnBean = new ReturnBean();\nList<Map<String, Object>> list = new ArrayList<>();\n//SearchHits提供有关所有匹配的全局信息，例如总命中数或最高分数：\nSearchHits hits = response.getHits();\nlong totalHits = response.getHits().getTotalHits();\nreturnBean.setTotal(totalHits);\nreturnBean.setCurrent(param.getPageNum());\nreturnBean.setSize(param.getPageSize());\nSearchHit[] searchHits = hits.getHits();\nArrayList"),e("String",[t._v(' fileInfoIdList = new ArrayList<>();\nfor (SearchHit hit : searchHits) {\n//获取命中的数据源\nMap<String, Object> source = hit.getSourceAsMap();\n//文件类别需要处理\nif ("fam_file_idx".equals(indexName) || (source.get("flag") != null && source.get("flag").toString().equals("file"))) {\nif (source.get("fileInfoId") != null) {\nfileInfoIdList.add(source.get("fileInfoId").toString());\n}\n}\n//高亮结果处理\nMap<String, HighlightField> highlightFields = hit.getHighlightFields();\nif (CollectionUtils.isNotEmpty(highlightFieldList)) {\nfor (int i = 0; i < highlightFieldList.size(); i++) {\nString name = highlightFieldList.get(i).toString();\nHighlightField highlightField = highlightFields.get(name);\nStringBuilder sb = new StringBuilder();\nif (highlightField != null) {\nText[] fragments = highlightField.getFragments();\nfor (Text text : fragments) {\nsb.append(text);\n}\nsource.put(name, sb.toString());\n}\n}\n}\nlist.add(source);\n}\nif (CollectionUtils.isNotEmpty(fileInfoIdList)) {\nHashMap<String, Object> map = fileComponent.queryFileList(fileInfoIdList);\nfor (Map<String, Object> objectMap : list) {\nif (map.get(objectMap.get("fileInfoId")) != null) {\nLinkedHashMap fileInfoMap = (LinkedHashMap) map.get(objectMap.get("fileInfoId"));\nobjectMap.put("fileInfoId", fileInfoMap.get("filePath") + fileInfoMap.get("fileName").toString());\nobjectMap.put("filePath", fileInfoMap.get("filePath"));\nobjectMap.put("fileName", fileInfoMap.get("fileName"));\nobjectMap.put("serverPath", fileInfoMap.get("serverPath"));\n}\n}\n}\nreturnBean.setRecords(list);\nreturn returnBean;\n}')])],1)])]),t._v(" "),e("p",[t._v("/**")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("@param param {@link com.sw.fam.vo.ais.SearchBean} 请求参数")])]),t._v(" "),e("li",[e("p",[t._v("@return ReturnBean {@link com.sw.fam.vo.ais.ReturnBean} 返回结果")])]),t._v(" "),e("li",[e("p",[t._v("@throws IOException 检索服务异常")])]),t._v(" "),e("li",[e("p",[t._v("@description 获取某个索引下面的分类")])]),t._v(" "),e("li",[e("p",[t._v("@create ganquanzhong 2020/09/22\n*/\n@Override\npublic ReturnBean queryGroupList(SearchBean param) throws IOException {\nSearchRequest searchRequest = null;\nString indexName = param.getClusterName();")]),t._v(" "),e("p",[t._v('// 构建SearchRequest检索请求\nif (indexName == null || "".equals(indexName)) {\n//查全部\nsearchRequest = new SearchRequest();\n} else {\nsearchRequest = new SearchRequest(indexName);\n}')]),t._v(" "),e("p",[t._v("// 创建一个SearchSourceBuilder专门用于构建查询条件\nSearchSourceBuilder sourceBuilder = new SearchSourceBuilder();")]),t._v(" "),e("p",[t._v('// 分组条件时加入的条件，如项目等\nBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\nif (param.getSearchMap() != null && param.getSearchMap().size() > 0) {\nfor (Map.Entry<String, Object> entry : param.getSearchMap().entrySet()) {\n//判断组织id\nif ("orgId".equals(entry.getKey())) {\nString orgIds = CurrentUser.getOrgIds();\nString newOrgIds = orgIds.replace("\'", "");\nString[] split = newOrgIds.split(",");\nif (split.length > 0) {\nboolQueryBuilder.filter(QueryBuilders.termsQuery(entry.getKey(), split));\n}\ncontinue;\n}\n//处理条件查询\nif (entry.getValue() != null && !"".equals(entry.getValue())) {\nboolQueryBuilder.filter(QueryBuilders.termQuery(entry.getKey(), entry.getValue()));\n}\n}\n}')]),t._v(" "),e("p",[t._v('//分组查询封装\nList searchGroup = IndexEntityVO.getSearchGroupTerm().get(indexName);\nReturnBean returnBean = new ReturnBean();\nList<Map<String, Object>> list = new ArrayList<>();\nHashMap<String, Object> group = new HashMap<>();\nif (CollectionUtils.isNotEmpty(searchGroup)) {\nSearchResponse response = null;\nMap<String, Aggregation> aggMap = null;\nParsedStringTerms stringTerms = null;\nIterator<? extends Terms.Bucket> iterator = null;\nfor (int i = 0; i < searchGroup.size(); i++) {\n//聚合查询\nAggregationBuilder groupAgg = AggregationBuilders\n.terms("group_" + searchGroup.get(i)).field(searchGroup.get(i).toString()).size(Integer.MAX_VALUE);\nsourceBuilder.aggregation(groupAgg).query(boolQueryBuilder);\nsearchRequest.source(sourceBuilder);\nresponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n//处理返回的聚合结果\naggMap = response.getAggregations().asMap();\nif (aggMap != null && aggMap.size() > 0) {\nstringTerms = (ParsedStringTerms) aggMap.get("group_" + searchGroup.get(i));\n//将集合转换成迭代器遍历桶\niterator = stringTerms.getBuckets().iterator();\nArrayList'),e("Map",[t._v(' resultList = new ArrayList<>();\nwhile (iterator.hasNext()) {\nHashMap<String, Object> sourceMap = new HashMap<>();\nTerms.Bucket bucket = iterator.next();\n//bucket桶也是一个map对象， 我们取它的key值就可以\nif (StringUtils.isNotEmpty(bucket.getKeyAsString())) {\nsourceMap.put("id", bucket.getKeyAsString());\nresultList.add(sourceMap);\n}\n}\ngroup.put(searchGroup.get(i) + "List", resultList);\n}\n}\n}\nlist.add(group);\nreturnBean.setRecords(list);\nreturn returnBean;\n}\n}')])],1)])])])]),t._v(" "),e("p",[t._v("————————————————\n版权声明：本文为CSDN博主「ForFuture  Code」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。")])],1)}),[],!1,null,null,null);n.default=a.exports}}]);